// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const getUserById = `-- name: GetUserById :one
SELECT id, user_name, email
FROM users 
WHERE id=$1
`

type GetUserByIdRow struct {
	ID       uuid.UUID
	UserName string
	Email    string
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.UserName, &i.Email)
	return i, err
}

const getUsersList = `-- name: GetUsersList :many
SELECT id, user_name, email
FROM users
`

type GetUsersListRow struct {
	ID       uuid.UUID
	UserName string
	Email    string
}

func (q *Queries) GetUsersList(ctx context.Context) ([]GetUsersListRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersListRow
	for rows.Next() {
		var i GetUsersListRow
		if err := rows.Scan(&i.ID, &i.UserName, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT id, email 
FROM users 
WHERE user_name=$1 AND password=$2
`

type LoginUserParams struct {
	UserName string
	Password string
}

type LoginUserRow struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.UserName, arg.Password)
	var i LoginUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users(user_name, password, email)
VALUES($1, $2, $3)
RETURNING id, user_name, email
`

type RegisterUserParams struct {
	UserName string
	Password string
	Email    string
}

type RegisterUserRow struct {
	ID       uuid.UUID
	UserName string
	Email    string
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (RegisterUserRow, error) {
	row := q.db.QueryRowContext(ctx, registerUser, arg.UserName, arg.Password, arg.Email)
	var i RegisterUserRow
	err := row.Scan(&i.ID, &i.UserName, &i.Email)
	return i, err
}
