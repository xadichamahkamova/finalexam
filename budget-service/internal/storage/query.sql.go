// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (user_id, category_id, amount, currency)
VALUES ($1, $2, $3, $4)
RETURNING id AS budget_id
`

type CreateBudgetParams struct {
	UserID     uuid.UUID
	CategoryID uuid.NullUUID
	Amount     int64
	Currency   string
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBudget,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.Currency,
	)
	var budget_id uuid.UUID
	err := row.Scan(&budget_id)
	return budget_id, err
}

const getListBudget = `-- name: GetListBudget :many
SELECT
    b.id AS budget_id,
    c.name AS category,
    b.amount,
    (COALESCE(SUM(t.amount), 0))::BIGINT AS spent,
    b.currency
FROM budgets AS b
INNER JOIN categories AS c 
    ON b.category_id = c.id
LEFT JOIN transactions AS t
    ON t.category_id = b.category_id
    AND t.type = 'expense'
    AND t.user_id = $1
WHERE b.user_id = $1
GROUP BY b.id, c.name, b.amount, b.currency
`

type GetListBudgetRow struct {
	BudgetID uuid.UUID
	Category string
	Amount   int64
	Spent    int64
	Currency string
}

func (q *Queries) GetListBudget(ctx context.Context, userID uuid.UUID) ([]GetListBudgetRow, error) {
	rows, err := q.db.QueryContext(ctx, getListBudget, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListBudgetRow
	for rows.Next() {
		var i GetListBudgetRow
		if err := rows.Scan(
			&i.BudgetID,
			&i.Category,
			&i.Amount,
			&i.Spent,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET amount = $2
WHERE id = $1
AND user_id = $3
RETURNING 'Budget updated successfully' AS message
`

type UpdateBudgetParams struct {
	ID     uuid.UUID
	Amount int64
	UserID uuid.UUID
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateBudget, arg.ID, arg.Amount, arg.UserID)
	var message string
	err := row.Scan(&message)
	return message, err
}
