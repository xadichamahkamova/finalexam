// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
)

const getReportsSpendingByCategory = `-- name: GetReportsSpendingByCategory :many
SELECT
    c.name AS category,
    (COALESCE(SUM(t.amount), 0))::BIGINT AS totalSpent
FROM
    transactions t
JOIN
    categories c ON t.category_id = c.id
GROUP BY
    c.name
`

type GetReportsSpendingByCategoryRow struct {
	Category   string
	Totalspent int64
}

func (q *Queries) GetReportsSpendingByCategory(ctx context.Context) ([]GetReportsSpendingByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsSpendingByCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsSpendingByCategoryRow
	for rows.Next() {
		var i GetReportsSpendingByCategoryRow
		if err := rows.Scan(&i.Category, &i.Totalspent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalReports = `-- name: GetTotalReports :one
SELECT
    (COALESCE(SUM(CASE WHEN type = 'income' THEN amount END), 0))::BIGINT AS total_income,
    (COALESCE(SUM(CASE WHEN type = 'expense' THEN amount END), 0))::BIGINT AS total_expenses,
    (COALESCE(SUM(CASE WHEN type = 'income' THEN amount END), 0) -
    COALESCE(SUM(CASE WHEN type = 'expense' THEN amount END), 0))::BIGINT AS net_savings
FROM
    transactions
`

type GetTotalReportsRow struct {
	TotalIncome   int64
	TotalExpenses int64
	NetSavings    int64
}

func (q *Queries) GetTotalReports(ctx context.Context) (GetTotalReportsRow, error) {
	row := q.db.QueryRowContext(ctx, getTotalReports)
	var i GetTotalReportsRow
	err := row.Scan(&i.TotalIncome, &i.TotalExpenses, &i.NetSavings)
	return i, err
}
