// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/reporting-service/reporting.proto

package reportingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReportingService_GetTotalReports_FullMethodName              = "/ReportingService/GetTotalReports"
	ReportingService_GetReportsSpendingByCategory_FullMethodName = "/ReportingService/GetReportsSpendingByCategory"
)

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingServiceClient interface {
	GetTotalReports(ctx context.Context, in *GetTotalReportsRequest, opts ...grpc.CallOption) (*GetTotalReportsResponse, error)
	GetReportsSpendingByCategory(ctx context.Context, in *GetReportsByCategoryRequest, opts ...grpc.CallOption) (*GetReportsByCategoryResponse, error)
}

type reportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingServiceClient(cc grpc.ClientConnInterface) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) GetTotalReports(ctx context.Context, in *GetTotalReportsRequest, opts ...grpc.CallOption) (*GetTotalReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalReportsResponse)
	err := c.cc.Invoke(ctx, ReportingService_GetTotalReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetReportsSpendingByCategory(ctx context.Context, in *GetReportsByCategoryRequest, opts ...grpc.CallOption) (*GetReportsByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportsByCategoryResponse)
	err := c.cc.Invoke(ctx, ReportingService_GetReportsSpendingByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
// All implementations must embed UnimplementedReportingServiceServer
// for forward compatibility
type ReportingServiceServer interface {
	GetTotalReports(context.Context, *GetTotalReportsRequest) (*GetTotalReportsResponse, error)
	GetReportsSpendingByCategory(context.Context, *GetReportsByCategoryRequest) (*GetReportsByCategoryResponse, error)
	mustEmbedUnimplementedReportingServiceServer()
}

// UnimplementedReportingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportingServiceServer struct {
}

func (UnimplementedReportingServiceServer) GetTotalReports(context.Context, *GetTotalReportsRequest) (*GetTotalReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalReports not implemented")
}
func (UnimplementedReportingServiceServer) GetReportsSpendingByCategory(context.Context, *GetReportsByCategoryRequest) (*GetReportsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsSpendingByCategory not implemented")
}
func (UnimplementedReportingServiceServer) mustEmbedUnimplementedReportingServiceServer() {}

// UnsafeReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingServiceServer will
// result in compilation errors.
type UnsafeReportingServiceServer interface {
	mustEmbedUnimplementedReportingServiceServer()
}

func RegisterReportingServiceServer(s grpc.ServiceRegistrar, srv ReportingServiceServer) {
	s.RegisterService(&ReportingService_ServiceDesc, srv)
}

func _ReportingService_GetTotalReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetTotalReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GetTotalReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetTotalReports(ctx, req.(*GetTotalReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetReportsSpendingByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetReportsSpendingByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GetReportsSpendingByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetReportsSpendingByCategory(ctx, req.(*GetReportsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingService_ServiceDesc is the grpc.ServiceDesc for ReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalReports",
			Handler:    _ReportingService_GetTotalReports_Handler,
		},
		{
			MethodName: "GetReportsSpendingByCategory",
			Handler:    _ReportingService_GetReportsSpendingByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reporting-service/reporting.proto",
}
